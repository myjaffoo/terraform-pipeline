node {

    stage name: 'Clean up'
        if (fileExists(".terraform/terraform.tfstate")) {
            sh "rm -rf .terraform/terraform.tfstate"
        }
        if (fileExists("tf-plan-status")) {
            sh "rm tf-plan-status"
        }
        if (fileExists("tf-validate-status")) {
            sh "rm tf-validate-status"
        }

    stage name: 'Checkout'
        echo "############# Checkout: Checking terraform files from source repository #############"
        git url: 'https://github.com/yas360/terraform-iam-policy.git'
        def tfHome = tool name: 'terraform', type: 'com.cloudbees.jenkins.plugins.customtools.CustomTool'
        env.PATH = "${tfHome}:${env.PATH}"
        sh 'terraform --version'

    stage name: 'Configure Remote Backend'
        echo "############# Configure Remote Backend: Configuring S3 remote backend and pulling remote terraform state #############"
        sh 'terraform remote config -backend=s3 -backend-config=\"bucket=tf-state-bucket-myj\" -backend-config=\"key=iam-policy/terraform.tfstate\" -backend-config=\"region=eu-west-1\"; terraform remote pull'

    stage name: 'Validate'
        echo "############# Validate: Checking syntax of terraform files #############"
        sh 'set +e;terraform validate;echo \$? > tf-validate-status'
        def valExitCode = readFile('tf-validate-status').trim()
        if (valExitCode == "1") {
            currentBuild.result = 'FAILURE'
        }

    stage name: 'Plan'
        echo "############# Plan: Creating terraform execution plan #############"
        sh 'set +e; terraform get -update; terraform plan -out=plan.out -detailed-exitcode; echo \$? > tf-plan-status'
        def planExitCode = readFile('tf-plan-status').trim()
        echo "Terraform Plan Exit Code: ${planExitCode}"
        def apply = false
        if (planExitCode == "0") {
            currentBuild.result = 'SUCCESS'
        }
        if (planExitCode == "1") {
            slackSend channel: '#ci', color: 'danger', message: "Plan Failed: ${env.JOB_NAME} - ${env.BUILD_NUMBER}"
            currentBuild.result = 'FAILURE'
        }
        if (planExitCode == "2") {
            stash name: "plan", includes: "plan.out"
            slackSend channel: '#ci', color: 'good', message: "Plan Awaiting Approval: ${env.JOB_NAME} - ${env.BUILD_NUMBER}"
            try {
                input message: 'Apply Plan?', ok: 'Apply'
                apply = true
            } catch (err) {
                apply = false
                currentBuild.result = 'UNSTABLE'
            }
        }

    if (apply) {
        stage name: 'Apply'
            echo "############# Apply: Applying the pre-determined set of actions generated by the terraform plan execution plan #############"
            unstash 'plan'
            if (fileExists("status.apply")) {
                sh 'rm status.apply'
            }
            sh 'set +e; terraform apply plan.out; echo \$? > status.apply'
            def applyExitCode = readFile('status.apply').trim()
            if (applyExitCode == "0") {
                echo "Successfully applied changes"
                currentBuild.result = 'SUCCESS'
            } else {
                currentBuild.result = 'FAILURE'
            }
        }
}

